seq(10)  # 1 to 10
seq(20, -10, by = -3)  # Count down from 20 to -10 by 3
# Surround command with parentheses to also display
(y <- c(5, 1, 0, 10))
x           # Display x again
x + y       # Adds corresponding elements in x and y
x * 2       # Multiplies each element in x by 2
2^6         # Powers/exponents
sqrt(64)    # Square root
log(100)    # Natural log: base e (2.71828...)
log10(100)  # Base 10 log
# Clear console
cat("\014")  # Mimics ctrl+L
# Clear console
cat("\014")  # Mimics ctrl+L
View(df)
n1 <- 15  # Double precision by default
n1 <- 15  # Double precision by default
n1
typeof(n1)
n2 <- 1.5
n2
typeof(n2)
c1 <- "c"
c1
typeof(c1)
c2 <- "a string of text"
c2
typeof(c2)
l1 <- TRUE
l1
typeof(l1)
l2 <- F
l2
typeof(l2)
v1 <- c(1, 2, 3, 4, 5)
v1
is.vector(v1)
# Clear console
cat("\014")  # Mimics ctrl+L
library(datasets)           # Loads the built-in datasets
?datasets                   # Give data about package
library(help = "datasets")  # Lists datasets
# iris
?iris
iris
# UCBAdmissions
?UCBAdmissions
UCBAdmissions
# Titanic
?Titanic
Titanic
# state.x77
?state.x77
state.x77
#swiss
?swiss
swiss
# Clear base packages
detach("package:datasets", unload = T)
# Clear console
cat("\014")  # Mimics ctrl+L
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # `readxl` is installed as part of the
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(tidyverse)
# Import CSV files with readr::read_csv() from tidyverse;
# data is saved as a "tibble"
df <- read_csv("data/state_trends.csv")
View(df)
# Check data
df           # See first ten lines of tibble
glimpse(df)  # See full variable names and types
df2 <- read_excel(
"data/state_trends.xlsx",
sheet = "all_data"
) |>
as_tibble() |>
select(state_code,
psych_region,
extraversion:openness) |>
rename(y = psych_region) |>
mutate(y = as.factor(y)) |>
print()
# Clear console
cat("\014")  # Mimics ctrl+L
library(datasets)   # Loads the built-in datasets
?iris       # Get help on `iris` dataset
df <- iris  # Save dataset to `df` (optional)
head(df)    # Display first six lines of data
# The R $ operator selects a variable from a data frame.
# Usage: dataset$variable
hist(df$Sepal.Width,            # Make basic histogram
main = "Iris Sepal Width",    # Add title to chart
xlab = "Sepal Width (in cm)"  # Add X-axis label
)                               # Close on new line
# Clear console
cat("\014")  # Mimics ctrl+L
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # `readxl` is installed as part of the
df2 <- read_excel(
"data/social_network.xlsx",
sheet = "all_data"
) |>
as_tibble() |>
select(state_code,
psych_region,
extraversion:openness) |>
rename(y = psych_region) |>
mutate(y = as.factor(y)) |>
print()
df2 <- read_excel(
"data/social_network.xlsx",
sheet = "all_data"
) |>
as_tibble() |>
select(state_code,
psych_region,
extraversion:openness) |>
rename(y = psych_region) |>
mutate(y = as.factor(y)) |>
print()
df2 <- read_excel(
"data/social_network.xlsx",
sheet = "all_data"
) |>
as_tibble() |>
select(id,
age,
gender,
site,
times
extraversion:openness) |>
t
df2 <- read_excel(
"data/social_network.xlsx",
sheet = "all_data"
) |>
as_tibble() |>
select(state_code,
psych_region,
extraversion:openness) |>
rename(y = psych_region) |>
mutate(y = as.factor(y)) |>
print()
df2 <- read_excel(
"data/social_network.xlsx",
sheet = "all_data"
) |>
as_tibble() |>
select(state_code,
psych_region,
extraversion:openness) |>
rename(y = psych_region) |>
mutate(y = as.factor(y)) |>
print()
# Import CSV files with readr::read_csv() from tidyverse;
# data is saved as a "tibble"
df <- read_csv("data/state_trends.csv")
# Check data
df           # See first ten lines of tibble
glimpse(df)  # See full variable names and types
df2 <- read_excel(
"data/social_network.xlsx",
sheet = "all_data"
) |>
as_tibble() |>
select(state_code,
psych_region,
extraversion:openness) |>
rename(y = psych_region) |>
mutate(y = as.factor(y)) |>
print()
df2 <- read_excel(
"data/social_network.xlsx",
sheet = "all_data"
) |>
as_tibble() |>
select(Gender,
Age,
extraversion:openness) |>
rename(y = Age) |>
mutate(y = as.factor(y)) |>
print()
df2 <- read_excel(
"data/social_network.xlsx"
) |>
as_tibble() |>
select(Gender,
Age,
extraversion:openness) |>
rename(y = Age) |>
mutate(y = as.factor(y)) |>
print()
df2 <- read_excel(
"data/social_network.xlsx",
sheet = "all_data"
) |>
as_tibble() |>
select(Gender,
Age,
extraversion:openness) |>
rename(y = Age) |>
mutate(y = as.factor(y)) |>
print()
df2 <- read_excel(
"data/social_network.xlsx",
sheet = "all_data"
) |>
as_tibble() |>
select(Gender,
Age,
extraversion:openness) |>
rename(y = Age) |>
mutate(y = as.factor(y)) |>
print()
df2 <- read_excel(
"data/social_network.xlsx"
) |>
as_tibble() |>
select(Gender,
Age,
extraversion:openness) |>
rename(y = Age) |>
mutate(y = as.factor(y)) |>
print()
df2 <- read_excel(
"data/social_network.xlsx"
) |>
as_tibble() |>
select(Gender,
Age,
Site) |>
rename(y = Age) |>
mutate(y = as.factor(y)) |>
print()
View(df2)
df2
View(df2)
(coerce1 <- c(1, "b", TRUE))
typeof(coerce1)
(coerce2 <- 5)
typeof(coerce2)
(coerce3 <- as.integer(5))
typeof(coerce3)
(coerce4 <- c("1", "2", "3"))
typeof(coerce4)
(coerce5 <- as.numeric(c("1", "2", "3")))
typeof(coerce5)
(coerce6 <- matrix(1:9, nrow= 3))
is.matrix(coerce6)
(coerce7 <- as.data.frame(matrix(1:9, nrow= 3)))
is.data.frame(coerce7)
# Clear console
cat("\014")  # Mimics ctrl+L
(coerce1 <- c(1, "b", TRUE))
typeof(coerce1)
(coerce2 <- 5)
typeof(coerce2)
(coerce3 <- as.integer(5))
typeof(coerce3)
(coerce4 <- c("1", "2", "3"))
typeof(coerce4)
(coerce5 <- as.numeric(c("1", "2", "3")))
library(datasets)           # Loads the built-in datasets
?datasets                   # Give data about package
library(help = "datasets")  # Lists datasets
# iris
?iris
iris
# UCBAdmissions
?UCBAdmissions
UCBAdmissions
# Titanic
?Titanic
Titanic
# state.x77
?state.x77
state.x77
#swiss
?swiss
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
# Also convert several adjacent variables to factors
df <- read_csv("data/state_trends.csv") |>
select(region:psy_reg) |>
mutate(across(c(psych_region, psy_reg), as_factor)) |>
print()
summary(df)  # Gives frequencies for factors only
# summary() not very useful
df |>
select(region) |>
summary()
# table() works better
df |>
select(region) |>
table()
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
# Also convert several adjacent variables to factors
df <- read_csv("data/state_trends.csv") |>
select(region:psy_reg) |>
mutate(across(c(psych_region, psy_reg), as_factor)) |>
print()
summary(df)  # Gives frequencies for factors only
# summary() not very useful
df |>
select(region) |>
summary()
# table() works better
df |>
select(region) |>
table()
# Using summary() works best
df |>
select(psych_region) |>
summary()
# Using table()
df |>
select(psych_region) |>
table()
# Convert region to a factor
df <- df |>
mutate(region = as_factor(region)) |>
print()
# Summarize multiple factors
summary(df)
# Clear console
cat("\014")  # Mimics ctrl+L
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
# Also convert several adjacent variables to factors
df <- read_csv("data/state_trends.csv") |>
mutate(across(c(
region, psych_region, psy_reg, has_nba:has_any
),
as_factor)
) |>
print()
# Summary for entire dataset
df |> summary()
# Summary for one variable
df |>
select(statistics) |>
summary()
# Tukey's five-number summary: minimum, lower-hinge,
# median, upper-hinge, maximum. No labels.
fivenum(df$statistics)
# Boxplot stats: hinges, n, CI for median, and outliers
boxplot(df$statistics, notch = T, horizontal = T)
boxplot.stats(df$statistics)
# The "psych" package gives many more options
browseURL("https://CRAN.R-project.org/package=psych")
# Clear console
cat("\014")  # Mimics ctrl+L
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
# Also convert several adjacent variables to factors
df <- read_csv("data/state_trends.csv") |>
select(  # Rename variables with `select`
DS = data_science,  # New = old
AI = artificial_intelligence,
ML = machine_learning,
DA = data_analysis,
BI = business_intelligence,
SS = spreadsheet,
Stats = statistics) |>
print()
# Clear console
cat("\014")  # Mimics ctrl+L
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
# Also convert several adjacent variables to factors
df <- read_csv("data/state_trends.csv") |>
select(  # Rename variables with `select`
DS = data_science,  # New = old
AI = artificial_intelligence,
ML = machine_learning,
DA = data_analysis,
BI = business_intelligence,
SS = spreadsheet,
Stats = statistics) |>
print()
# Scatterplot matrix
df |> plot()
# Correlation matrix
df |> cor()
# Rounded to 2 decimals
df |>
cor() |>
round(2)
# Can test one pair of variables at a time.
# Gives r, hypothesis test, and confidence interval
cor.test(df$DS, df$DA)
# The `Hmisc` package can get p-values for matrix
browseURL("https://cran.r-project.org/web/packages/Hmisc/")
# The `rstatix` package is another option (with graphs)
browseURL("https://cran.r-project.org/web/packages/rstatix/")
# Clear console
cat("\014")  # Mimics ctrl+L
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
# Select the personality and Google Trends variables
df <- read_csv("data/state_trends.csv") |>
select(extraversion:hockey) |>
print()
# Clear console
cat("\014")  # Mimics ctrl+L
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
# Select the personality and Google Trends variables
df <- read_csv("data/state_trends.csv") |>
select(extraversion:hockey) |>
print()
# Scatterplot of "data_science" and personality variables
df |>
select(data_science, extraversion:openness) |>
plot()
# Quick graphical check on bivariate association
df |>
select(openness, data_science) |>
plot()
# Add regression line with lm(); usage: y ~ X
# Note different variable order (vs plot)
lm(df$data_science ~ df$openness) |> abline()
# Compute and save bivariate regression
fit1 <- lm(df$data_science ~ df$openness)
# Show model
fit1
# Summarize regression model
summary(fit1)
# Confidence intervals for coefficients
confint(fit1)
# Predict values of "data_science"
predict(fit1)
# Prediction intervals for values of "data_science"
predict(fit1, interval = "prediction")
# Regression diagnostics
lm.influence(fit1)
influence.measures(fit1)
# Moving the outcome, y, to the front and having nothing
# else but predictor variables, X, can make things easier
df <- df |>
select(data_science, extraversion:openness) |>
print()
# Most concise
lm(df)
# Identify outcome, infer rest
lm(data_science ~ ., data = df)
# Identify entire model
lm(data_science ~ extraversion + agreeableness +
conscientiousness + neuroticism + openness, data = df)
# Save model
fit2 <- lm(df)
# Show model
fit2
# Summarize regression model
summary(fit2)
# Clear console
cat("\014")  # Mimics ctrl+L
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
# Also convert all variables to factors
df <- read_csv("data/state_trends.csv") |>
select(region, psy_reg) |>
mutate(across(everything(), as_factor)) |>
print()
# Create contingency table
ct <- table(df$region, df$psy_reg)
ct
# Row percentages
ct |>
prop.table(1) |>  # 1 is for row percentages
round(2) * 100
# Column percentages
ct |>
prop.table(2) |>  # 2 is for columns percentages
round(2) * 100
# Total percentages
ct |>
prop.table() |>  # No argument for total percentages
round(2) * 100
# Chi-squared test (but n is small)
tchi <- chisq.test(ct)
tchi
# Get p-value  in one step
table(df$region, df$psy_reg) |> chisq.test()
# Additional tables
tchi$observed   # Observed frequencies (same as ct)
tchi$expected   # Expected frequencies
tchi$residuals  # Pearson's residual
tchi$stdres     # Standardized residual
# Clear console
cat("\014")  # Mimics ctrl+L
library(tidyverse)
detach("package:tidyverse", unload = TRUE)
